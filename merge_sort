def merge_sort(m): 
    if len(m) <= 1: 
        return m
    middle = len(m) // 2
    left = m[:middle]
    right = m[middle:]
    
    left = merge_sort(left)
    right = merge_sort(right)
    return list(merge(left, right))

def merge(left, right): 
    result = []
    left_idx, right_idx = 0, 0
    while left_idx < len(left) and right_idx < len(right): 
        if left[left_idx] <= right[right_idx]: 
            result.append(left[left_idx]) 
            left_idx += 1
        else:
             result.append(right[right_idx])
             right_idx += 1
    if left_idx < len(left):
        esult.extend(left[left_idx:])
    if right_idx < len(right):
        result.extend(right[right_idx:])
    return result

import random as rd
import time
def merge_test(k = 100): 
    m = [rd.randint(1, 2*k)for i in range(k)]
    t0 = time.perf_counter()
    sortedList = merge_sort(m)
    t = time.perf_counter()
    print('Merge sort', k, 'items costs', t-t0, 'seconds.')
if __name__ == '__main__':
   merge_test()